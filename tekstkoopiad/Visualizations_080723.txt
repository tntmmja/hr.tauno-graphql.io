const Visualizations = (function() {
    function generateBarChart(data) {
     
        var xpPerProject = {};  // Object to store the total XP per project.
        data.forEach(transaction => {
          var project = transaction.object.name;
          var xp = transaction.amount / 1000;
          if (xpPerProject[project]) {
            xpPerProject[project] += xp;
          } else {
            xpPerProject[project] = xp;
          }
        });
      
        var margin = {top: 20, right: 20, bottom: 30, left: 40};
        var width = 960 - margin.left - margin.right;
        var height = 500 - margin.top - margin.bottom;
      
        var x = d3.scaleBand()
            .range([0, width])
            .padding(0.1);
        var y = d3.scaleLinear()
            .range([height, 0]);
      
        var svg = d3.select("#barChart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      
        x.domain(Object.keys(xpPerProject));
        y.domain([0, d3.max(Object.values(xpPerProject))]);
      
        svg.selectAll(".bar")
          .data(Object.entries(xpPerProject))
          .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function(d) { return x(d[0]); })
            .attr("width", x.bandwidth())
            .attr("y", function(d) { return y(d[1]); })
            .attr("height", function(d) { return height - y(d[1]); });
        //...
      }
  
      function generateLineGraph(data) {

        var xpPerDate = {};  // Object to store the total XP per date.
        data.forEach(transaction => {
          var date = new Date(transaction.createdAt).toLocaleDateString();
          var xp = transaction.amount / 1000;
          if (xpPerDate[date]) {
            xpPerDate[date] += xp;
          } else {
            xpPerDate[date] = xp;
          }
        });
      
        // Convert xpPerDate to an array of objects.
        var dataArr = Object.keys(xpPerDate).map(date => {
          return {date: new Date(date), xp: xpPerDate[date]};
        });
      
        dataArr.sort((a, b) => a.date - b.date);  // Sort data by date.
      
        var margin = {top: 20, right: 20, bottom: 30, left: 50};
        var width = 960 - margin.left - margin.right;
        var height = 500 - margin.top - margin.bottom;
      
        var x = d3.scaleTime()
            .range([0, width])
            .domain(d3.extent(dataArr, function(d) { return d.date; }));
      
        var y = d3.scaleLinear()
            .range([height, 0])
            .domain([0, d3.max(dataArr, function(d) { return d.xp; })]);
      
        var line = d3.line()
            .x(function(d) { return x(d.date); })
            .y(function(d) { return y(d.xp); });
      
        var svg = d3.select("#lineGraph").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));
      
        svg.append("g")
            .attr("class", "y axis")
            .call(d3.axisLeft(y));
      
        svg.append("path")
            .datum(dataArr)
            .attr("class", "line")
            .attr("d", line);
      }
      
  
    return {
      generateBarChart,
      generateLineGraph
    };
  })();
  